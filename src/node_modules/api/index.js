import R from 'ramda';
import request from 'superagent';
import categories from './mockCategories';

export const fetchParts = async () => {
    const {body} = await request.get(
        'https://react-project-server.herokuapp.com/items'
    );
    return body;
};

export const loadMoreParts = async () => {
    const {body} = await request.get(
        'https://react-project-server.herokuapp.com/items'
    );
    return body;
};

export const fetchPartById = async id => {
    const {body} = await request.get(
        'https://react-project-server.herokuapp.com/items'
    );
    const part = R.find(R.propEq('id', id), body);
    return part;
};

export const fetchCategories = async () => {
    return new Promise(resolve => { // возвращаем promise который возвращает parts
        resolve(categories)
    })
};


// import parts from './mockParts';

// return new Promise(resolve => { // возвращаем promise который возвращает parts
//     resolve(parts)
// })

// export const loadMoreParts = async ({offset}) => {
//     return new Promise(resolve => { // в реальном приложении нужно передать offset в url и получили в promise новые данные
//         resolve(parts)
//     })
// };

// export const fetchPartById = async id => {
//     return new Promise((resolve, reject) => {
//         const part = R.find(R.propEq('id', id), parts); // ищем в parts у каждого объекта id который мы передали
//         resolve(part)
//     })
// };