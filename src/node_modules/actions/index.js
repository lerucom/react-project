import {
    FETCH_PARTS_START,
    FETCH_PARTS_SUCCESS,
    FETCH_PARTS_FAILURE,
    LOAD_MORE_PARTS_START,
    LOAD_MORE_PARTS_SUCCESS,
    LOAD_MORE_PARTS_FAILURE,
    FETCH_PART_BY_ID_START,
    FETCH_PART_BY_ID_SUCCESS,
    FETCH_PART_BY_ID_FAILURE,
    ADD_PART_TO_BASKET,
    SEARCH_PART
} from 'actionTypes'

import {getRenderedPartsLength} from "selectors";

import {
    fetchParts as fetchPartsApi,
    loadMoreParts as loadMorePartsApi,
    fetchPartById as fetchPartByIdApi
} from "api";

export const fetchParts = () => async dispatch => {
    dispatch({type: FETCH_PARTS_START});

    try {
        const parts = await fetchPartsApi();
        dispatch({
            type: FETCH_PARTS_SUCCESS,
            payload: parts
        })
    } catch (err) {
        dispatch({
            type: FETCH_PARTS_FAILURE,
            payload: err,
            error: true
        })

    }
};

export const loadMoreParts = () => async (dispatch, getState) => {
    const offset = getRenderedPartsLength(getState()); // количество эл-тов на странице
    dispatch({type: LOAD_MORE_PARTS_START});

    try {
        const parts = await loadMorePartsApi({offset}); // если offset = 6,  то выводим следующие 6 товаров
        dispatch({
            type: LOAD_MORE_PARTS_SUCCESS,
            payload: parts
        })
    } catch (err) {
        dispatch({
            type: LOAD_MORE_PARTS_FAILURE,
            payload: err,
            error: true
        })

    }
};

export const fetchPartById = id => async dispatch => {
    dispatch({type: FETCH_PART_BY_ID_START});

    try {
        const part = await fetchPartByIdApi(id);
        dispatch ({
            type: FETCH_PART_BY_ID_SUCCESS,
            payload: part
        })
    } catch (err) {
        dispatch({
            type: FETCH_PART_BY_ID_FAILURE,
            payload: err,
            error: true
        })
    }
};

export const addPartToBasket = id => dispatch => {
    dispatch({
        type: ADD_PART_TO_BASKET,
        payload: id
  })
};

export const searchPart = text => dispatch => {
    dispatch({
        type: SEARCH_PART,
        payload: text
  })
};